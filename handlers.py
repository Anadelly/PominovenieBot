import os
import re
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

ZAPISKI_DIR = "zapiski"
ZDRAVIE_FILE = os.path.join(ZAPISKI_DIR, "–æ_–∑–¥—Ä–∞–≤–∏–∏.docx")
UPOKOENIE_FILE = os.path.join(ZAPISKI_DIR, "–æ_—É–ø–æ–∫–æ–µ–Ω–∏–∏.docx")

def ensure_dir():
    os.makedirs(ZAPISKI_DIR, exist_ok=True)

def append_to_docx(filepath, names, sender):
    from docx import Document

    if os.path.exists(filepath):
        doc = Document(filepath)
    else:
        doc = Document()
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        heading = "–û –∑–¥—Ä–∞–≤–∏–∏" if "–∑–¥—Ä–∞–≤" in filepath else "–û–± —É–ø–æ–∫–æ–µ–Ω–∏–∏"
        p = doc.add_paragraph(heading)
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        p.runs[0].font.size = Pt(12)

    # –î–æ–±–∞–≤–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    doc.add_paragraph(f"{sender}:", style=None).runs[0].font.size = Pt(12)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±–∑–∞—Ü —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏
    column_count = 4
    columns = [[] for _ in range(column_count)]

    for i, name in enumerate(names):
        columns[i % column_count].append(name)

    max_len = max(len(col) for col in columns)
    for i in range(max_len):
        row = []
        for col in columns:
            row.append(col[i] if i < len(col) else "")
        line = "     ".join(row)  # –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
        p = doc.add_paragraph(line)
        p.runs[0].font.size = Pt(12)

    doc.save(filepath)

def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û –∑–¥—Ä–∞–≤–∏–∏", callback_data="ozdravii")],
        [InlineKeyboardButton("–û–± —É–ø–æ–∫–æ–µ–Ω–∏–∏", callback_data="oupokoenii")],
        [InlineKeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", callback_data="donate")],
        [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û –∑–¥—Ä–∞–≤–∏–∏", callback_data="ozdravii")],
        [InlineKeyboardButton("–û–± —É–ø–æ–∫–æ–µ–Ω–∏–∏", callback_data="oupokoenii")],
        [InlineKeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", callback_data="donate")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞–ø–∏—Å–∫–∏ –≤ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π —Ö—Ä–∞–º —Å–≤—â–º—á. –°–∏–ª—å–≤–µ—Å—Ç—Ä–∞ –û–º—Å–∫–æ–≥–æ –≥. –û–º—Å–∫–∞ üìú\n"
        "\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Å–∫–∏ –∏ –≤–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
        "–ò–º–µ–Ω–∞ –±—É–¥—É—Ç –ø–æ–º—è–Ω—É—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–π –õ–∏—Ç—É—Ä–≥–∏–∏ üôè\n"
        "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data in ["ozdravii", "oupokoenii"]:
        context.user_data["type"] = query.data
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤: –ú–∞—Ä–∏–∏ –°–µ—Ä–≥–∏—è –ê–Ω–∞—Ç–æ–ª–∏—è")
    elif query.data == "donate":
        with open("static/qr-code.jpg", "rb") as qr:
            await query.message.reply_photo(
                photo=qr,
                caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ https://qr.nspk.ru/BS2A003TTV82T23F844A34OJIMUM20JS?type=01&bank=100000000005&crc=7FF6 –°–ø–∞—Å–∏–±–æ!"
            )
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard())
    elif query.data == "restart":
        context.user_data.clear()
        await query.edit_message_text(
            "üîÑ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_keyboard()
        )    

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_type = context.user_data.get("type")
    if not note_type:
        return

    ensure_dir()
    names = re.findall(r"[–ê-–Ø–∞-—è—ë–Å ]+", update.message.text)
    names = [name.strip() for name in names if name.strip()]
    sender = update.effective_user.full_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    if names:
        filepath = ZDRAVIE_FILE if note_type == "ozdravii" else UPOKOENIE_FILE
        append_to_docx(filepath, names, sender)
        response = "‚úÖ –ò–º–µ–Ω–∞ –æ –∑–¥—Ä–∞–≤–∏–∏ –ø—Ä–∏–Ω—è—Ç—ã." if note_type == "ozdravii" else "‚úÖ –ò–º–µ–Ω–∞ –æ–± —É–ø–æ–∫–æ–µ–Ω–∏–∏ –ø—Ä–∏–Ω—è—Ç—ã."
        await update.message.reply_text(response, reply_markup=get_keyboard())
    else:
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_keyboard())
    context.user_data["type"] = None

async def export_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram.constants import ChatAction
    import yadisk

    user_id = update.effective_user.id
    admin_ids = [int(i.strip()) for i in os.getenv("ADMIN_IDS", "").split(",") if i.strip()]
    if user_id not in admin_ids:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    ensure_dir()
    exported = False
    for path in [ZDRAVIE_FILE, UPOKOENIE_FILE]:
        if os.path.exists(path):
            await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
            with open(path, "rb") as f:
                await update.message.reply_document(f)
            try:
                token = os.getenv("YANDEX_DISK_TOKEN")
                if token:
                    y = yadisk.YaDisk(token=token)
                    y.upload(path, f"/pominovenie/{os.path.basename(path)}", overwrite=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
            os.remove(path)
            exported = True

    if exported:
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∫–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –æ–±–Ω—É–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("‚ö† –ü–∞–ø–∫–∞ —Å –∑–∞–ø–∏—Å–∫–∞–º–∏ –ø—É—Å—Ç–∞.")


from utils.yadisk_utils import upload_docx_to_yadisk
from datetime import datetime
import os
import shutil

async def upload_yadisk_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_IDS = list(map(int, os.environ.get("ADMIN_IDS", "").split(",")))
    if update.effective_user.id not in ADMIN_IDS:
        return
    filename = f"zapiski_{datetime.now().strftime('%Y-%m-%d')}.docx"
    file_path = os.path.join(".", filename)
    if not os.path.exists(file_path):
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return
    archived_path = os.path.join(".", f"–∞—Ä—Ö_{filename}")
    shutil.move(file_path, archived_path)
    success = upload_docx_to_yadisk(archived_path)
    if success:
        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
