import os
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document
from docx.shared import Pt

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(i.strip()) for i in os.getenv("ADMIN_IDS", "").split(",") if i.strip()]

# === –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û –∑–¥—Ä–∞–≤–∏–∏", callback_data='ozdravii')],
        [InlineKeyboardButton("–û–± —É–ø–æ–∫–æ–µ–Ω–∏–∏", callback_data='oupokoenii')],
        [InlineKeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", callback_data='donate')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data in ['ozdravii', 'oupokoenii']:
        context.user_data['type'] = query.data
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–±–æ–ª—è—â–µ–π –ú–∞—Ä–∏–∏, –º–ª–∞–¥–µ–Ω—Ü–∞ –°–µ—Ä–≥–∏—è, –≤–æ–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞")
    
    elif query.data == 'donate':
        with open('static/qr-code.jpg', 'rb') as qr:
            await query.message.reply_photo(
                photo=qr,
                caption="üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞.\n\nüíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note_type = context.user_data.get('type')
    if note_type:
        names = re.findall(r'[–ê-–Ø–∞-—è—ë–Å ]+', update.message.text)
        names = [name.strip() for name in names if name.strip()]

        if names:
            now = datetime.now().strftime("%d%m%Y")
            filename = f"{'–æ_–∑–¥—Ä–∞–≤–∏–∏' if note_type == 'ozdravii' else '–æ_—É–ø–æ–∫–æ–µ–Ω–∏–∏'}_{now}.docx"
            filepath = os.path.join("zapiski", filename)

            os.makedirs("zapiski", exist_ok=True)
            doc = Document()
            table = doc.add_table(rows=1, cols=3)
            cells = table.rows[0].cells

            for i in range(min(3, len(names))):
                paragraph = cells[i].paragraphs[0]
                run = paragraph.add_run(names[i])
                run.font.size = Pt(14)

            doc.save(filepath)
            await update.message.reply_text("–ó–∞–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. üôè")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        context.user_data['type'] = None

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
